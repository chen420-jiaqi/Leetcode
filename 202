//The leetcode No.202 question is named Happy Number(Easy).
//In this question, the return will be TRUE only when the result equal 1. 
//In each time calculation, if the result loops endlessly in a cycle which doesn't include 1, the return will be false. 
//I choose HashSet to solve this problem.The idea is use one hash set to record the the sum of the squares of every number. 
//If current sum can't add to this set, that means this value already recorded in the set, return false.
//If current sum equal 1, return true. 

class Solution {
    public boolean isHappy(int n) { 
    
    Set<Integer> set = new HashSet<>();
    while(!set.contains(n)){
        set.add(n);
        int sum = 0;
        while( n > 0){
            int d = n % 10;
            sum += d * d;
            n = n / 10;
            }
        if(sum == 1){
            return true;
            }else{
                n = sum;
                }
        }
    return false;
    }
}
